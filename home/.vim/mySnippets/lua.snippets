priority 0

###########################
# Custom snippets for lua #
###########################

snippet @module "Module definition" b
------------
-- ${1:module_name}
-- ${2:description}
-- module:  $1
-- author:  `!v get(g:, 'lua_author', $USER)`
-- license: `!v get(g:, 'lua_license', 'MIT')`
endsnippet

global !p
def var_deps(args):
    result = ""
    argList = args.split(",")

    for arg in argList:
        dep = "-- " + arg.strip() + "\n"
        result = result + dep

    return result.rstrip()

def remove_types(fun_name, fun_args, buffer):
	#args = fun_args.current_text.split(',')
	#args_with_types = [a.split(':') for a in args]
	#names = [xs[0].strip() for i, xs in enumerate(args_with_types)]
	#arg_types = [xs[1].strip() for i, xs in enumerate(args_with_types)]
	buffer[n+1] = 'function {}({})'.format(fun_name.current_text, "DDDD")
	# args_list = tabstop.current_text.split(",")
	# vim.command('call cursor(%d, %d)' % (tabstop.start.line + 1, tabstop.start.col))
	# snip.expand_anon('(%s)$2' % tabstop.current_text)
endglobal

post_jump "if snip.tabstop == 3: remove_types(snip.tabstops[1], snip.tabstops[2], snip.buffer)"
snippet !fun(ction)?! "New function" br
--- ${3:description}
`!p snip.rv = var_deps(t[2])`
function ${1:new_function}(${2})
  $0
end
endsnippet
